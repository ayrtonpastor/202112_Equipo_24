{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport class HttpErrorResponseService extends HttpErrorResponse {\n  constructor(toastrService) {\n    super(toastrService);\n    this.toastrService = toastrService;\n  }\n\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errMsg = '';\n      let errorType = 'Error'; // Client Side Error\n\n      if (error.error instanceof ErrorEvent) {\n        errMsg = `Error: ${error.error.message}`;\n      } else {\n        // Server Side Error\n        if (error.status === 0) {\n          errMsg = `${error.status}, \"No hay conexión con el servidor\"`;\n          errorType = 'Major Error';\n        } else {\n          errMsg = `${error.status}: ${error.error.message}`;\n        }\n\n        this.toastrService.error(errMsg, errorType, {\n          closeButton: true\n        });\n      }\n\n      console.log(errMsg);\n      return throwError(errMsg);\n    }));\n  }\n\n}\n\nHttpErrorResponseService.ɵfac = function HttpErrorResponseService_Factory(t) {\n  return new (t || HttpErrorResponseService)(i0.ɵɵinject(i1.ToastrService));\n};\n\nHttpErrorResponseService.ɵprov = i0.ɵɵdefineInjectable({\n  token: HttpErrorResponseService,\n  factory: HttpErrorResponseService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(HttpErrorResponseService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.ToastrService\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["/home/ayrtonpc/AngularProjects/202112_Equipo_24/src/app/interceptors/http-error-response.service.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAuE,sBAAvE;AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAqB,UAArB,QAAuC,MAAvC;AACA,SAAS,UAAT,QAA2B,gBAA3B;;;AAIA,OAAM,MAAO,wBAAP,SAAwC,iBAAxC,CAAyD;AAE7D,EAAA,WAAA,CAAoB,aAApB,EAAgD;AAAI,UAAM,aAAN;AAAhC,SAAA,aAAA,GAAA,aAAA;AAAsD;;AAC1E,EAAA,SAAS,CAAC,OAAD,EAA4B,IAA5B,EAA6C;AACpD,WAAO,IAAI,CAAC,MAAL,CAAY,OAAZ,EACJ,IADI,CAEH,UAAU,CAAE,KAAD,IAA6B;AACtC,UAAI,MAAM,GAAG,EAAb;AACA,UAAI,SAAS,GAAG,OAAhB,CAFsC,CAGtC;;AACA,UAAI,KAAK,CAAC,KAAN,YAAuB,UAA3B,EAAuC;AACrC,QAAA,MAAM,GAAG,UAAU,KAAK,CAAC,KAAN,CAAY,OAAO,EAAtC;AACD,OAFD,MAEO;AAAG;AACR,YAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAA,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,qCAAxB;AACA,UAAA,SAAS,GAAG,aAAZ;AACD,SAHD,MAGO;AACL,UAAA,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,KAAN,CAAY,OAAO,EAAhD;AACD;;AACD,aAAK,aAAL,CAAmB,KAAnB,CAAyB,MAAzB,EAAiC,SAAjC,EAA4C;AAAE,UAAA,WAAW,EAAE;AAAf,SAA5C;AACD;;AACD,MAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,aAAO,UAAU,CAAC,MAAD,CAAjB;AACD,KAjBS,CAFP,CAAP;AAqBD;;AAzB4D;;;mBAAlD,wB,EAAwB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,C;AAAA,C;;;SAAxB,wB;AAAwB,EAAA,OAAA,EAAxB,wBAAwB,CAAA;;;;;uBAAxB,wB,EAAwB,CAAA;UADpC;AACoC,GAAA,C","sourcesContent":["import { HttpErrorResponse, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class HttpErrorResponseService extends HttpErrorResponse {\n\n  constructor(private toastrService: ToastrService) { super(toastrService) }\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          let errMsg = '';\n          let errorType = 'Error';\n          // Client Side Error\n          if (error.error instanceof ErrorEvent) {\n            errMsg = `Error: ${error.error.message}`;\n          } else {  // Server Side Error\n            if (error.status === 0) {\n              errMsg = `${error.status}, \"No hay conexión con el servidor\"`;\n              errorType = 'Major Error';\n            } else {\n              errMsg = `${error.status}: ${error.error.message}`;\n            }\n            this.toastrService.error(errMsg, errorType, { closeButton: true });\n          }\n          console.log(errMsg);\n          return throwError(errMsg);\n        })\n      )\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}