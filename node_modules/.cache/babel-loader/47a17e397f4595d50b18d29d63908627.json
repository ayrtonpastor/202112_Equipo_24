{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/internal/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CollectorService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = environment.baseUrl + 'collectors';\n  }\n\n  getCollectors() {\n    return this.httpClient.get(this.apiUrl);\n  }\n\n  getCollectorAlbums(collector_id) {\n    return this.httpClient.get(this.apiUrl + '/' + collector_id + '/albums');\n  }\n\n  createCollectorAlbum(collector_id, album_id, price, status) {\n    let data = {\n      \"price\": price,\n      \"status\": status\n    };\n    const url = this.apiUrl + '/' + collector_id + '/albums/' + album_id;\n    return this.httpClient.post(url, data, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n\n  getCollectorDetail(collector_id) {\n    return forkJoin([this.httpClient.get(this.apiUrl + '/' + collector_id), this.getCollectorAlbums(collector_id)]).pipe(map(data => {\n      let collector = data[0];\n      let albums = data[1];\n      collector.collectorAlbums = albums;\n      return collector;\n    }));\n  }\n\n  addFavoriteMusician(collector_id, musician_id) {\n    const url = this.apiUrl + '/' + collector_id + '/musicians/' + musician_id;\n    return this.httpClient.post(url, null, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n\n}\n\nCollectorService.ɵfac = function CollectorService_Factory(t) {\n  return new (t || CollectorService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCollectorService.ɵprov = i0.ɵɵdefineInjectable({\n  token: CollectorService,\n  factory: CollectorService.ɵfac,\n  providedIn: 'root'\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(CollectorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["/home/ayrtonpc/AngularProjects/202112_Equipo_24/src/app/collector/collector.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAqB,WAArB,QAAwC,sBAAxC;AAEA,SAAS,QAAT,QAA2C,MAA3C;AACA,SAAS,GAAT,QAAoB,yBAApB;AACA,SAAS,WAAT,QAA4B,8BAA5B;;;AASA,OAAM,MAAO,gBAAP,CAAuB;AAE3B,EAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,SAAA,UAAA,GAAA,UAAA;AADZ,SAAA,MAAA,GAAiB,WAAW,CAAC,OAAZ,GAAsB,YAAvC;AACuC;;AAE/C,EAAA,aAAa,GAAA;AACX,WAAO,KAAK,UAAL,CAAgB,GAAhB,CAAuC,KAAK,MAA5C,CAAP;AACD;;AAED,EAAA,kBAAkB,CAAC,YAAD,EAAqB;AACrC,WAAO,KAAK,UAAL,CAAgB,GAAhB,CAA6B,KAAK,MAAL,GAAc,GAAd,GAAoB,YAApB,GAAmC,SAAhE,CAAP;AACD;;AAED,EAAA,oBAAoB,CAAC,YAAD,EAAuB,QAAvB,EAAyC,KAAzC,EAAwD,MAAxD,EAA4E;AAC9F,QAAI,IAAI,GAAG;AACT,eAAS,KADA;AAET,gBAAU;AAFD,KAAX;AAIA,UAAM,GAAG,GAAG,KAAK,MAAL,GAAc,GAAd,GAAoB,YAApB,GAAmC,UAAnC,GAAgD,QAA5D;AACA,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqC,GAArC,EAA2C,IAA3C,EAAiD;AACtD,MAAA,OAAO,EAAE,IAAI,WAAJ,CAAgB;AACvB,wBAAgB;AADO,OAAhB;AAD6C,KAAjD,CAAP;AAKD;;AAED,EAAA,kBAAkB,CAAC,YAAD,EAAqB;AACrC,WAAO,QAAQ,CACb,CACE,KAAK,UAAL,CAAgB,GAAhB,CAAuC,KAAK,MAAL,GAAc,GAAd,GAAoB,YAA3D,CADF,EAEE,KAAK,kBAAL,CAAwB,YAAxB,CAFF,CADa,CAAR,CAIF,IAJE,CAKH,GAAG,CACA,IAAD,IAAgB;AACd,UAAI,SAAS,GAAoB,IAAI,CAAC,CAAD,CAArC;AACA,UAAI,MAAM,GAAqB,IAAI,CAAC,CAAD,CAAnC;AACA,MAAA,SAAS,CAAC,eAAV,GAA4B,MAA5B;AACA,aAAO,SAAP;AACD,KANA,CALA,CAAP;AAaD;;AAED,EAAA,mBAAmB,CAAC,YAAD,EAAuB,WAAvB,EAA0C;AAC3D,UAAM,GAAG,GAAG,KAAK,MAAL,GAAc,GAAd,GAAoB,YAApB,GAAmC,aAAnC,GAAmD,WAA/D;AACA,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAA+B,GAA/B,EAAqC,IAArC,EAA2C;AAChD,MAAA,OAAO,EAAE,IAAI,WAAJ,CAAgB;AACvB,wBAAgB;AADO,OAAhB;AADuC,KAA3C,CAAP;AAKD;;AAhD0B;;;mBAAhB,gB,EAAgB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAhB,gB;AAAgB,EAAA,OAAA,EAAhB,gBAAgB,CAAA,I;AAAA,EAAA,UAAA,EAFf;;;;;uBAED,gB,EAAgB,CAAA;UAH5B,UAG4B;WAHjB;AACV,MAAA,UAAU,EAAE;AADF,K;AAGiB,GAAA,C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { CollectorDetail } from './collector-detail';\nimport { forkJoin, Observable, pipe } from 'rxjs';\nimport { map } from 'rxjs/internal/operators';\nimport { environment } from 'src/environments/environment';\nimport { Album } from '../album/album';\nimport { CollectorAlbum } from '../collectoralbum/collectoralbum';\nimport { Musician } from '../musician/musician';\nimport { ALBUM_STATUS } from '../albumstatus/albumstatus.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollectorService {\n  private apiUrl: string = environment.baseUrl + 'collectors';\n  constructor(private httpClient: HttpClient) { }\n\n  getCollectors(): Observable<CollectorDetail[]> {\n    return this.httpClient.get<CollectorDetail[]>(this.apiUrl);\n  }\n\n  getCollectorAlbums(collector_id: number): Observable<Album[]> {\n    return this.httpClient.get<Album[]>(this.apiUrl + '/' + collector_id + '/albums');\n  }\n\n  createCollectorAlbum(collector_id: number, album_id: number, price: number, status: ALBUM_STATUS): Observable<CollectorAlbum> {\n    let data = {\n      \"price\": price,\n      \"status\": status\n    }\n    const url = this.apiUrl + '/' + collector_id + '/albums/' + album_id\n    return this.httpClient.post<CollectorAlbum>(url , data, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    })\n  }\n\n  getCollectorDetail(collector_id: number): Observable<CollectorDetail> {\n    return forkJoin(\n      [\n        this.httpClient.get<CollectorDetail[]>(this.apiUrl + '/' + collector_id),\n        this.getCollectorAlbums(collector_id)\n      ]).pipe(\n        map(\n          (data: any[]) => {\n            let collector: CollectorDetail = data[0];\n            let albums: CollectorAlbum[] = data[1];\n            collector.collectorAlbums = albums;\n            return collector;\n          })\n      );\n  }\n\n  addFavoriteMusician(collector_id: number, musician_id: number): Observable<Musician> {\n    const url = this.apiUrl + '/' + collector_id + '/musicians/' + musician_id;\n    return this.httpClient.post<Musician>(url , null, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    })\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}