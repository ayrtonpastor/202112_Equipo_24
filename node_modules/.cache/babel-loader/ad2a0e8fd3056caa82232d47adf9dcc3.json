{"ast":null,"code":"import { Directive, ElementRef, NgModule, InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, ComponentFactoryResolver, ApplicationRef, SecurityContext, INJECTOR, NgZone, Injector, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"toast-component\", \"\"];\n\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.remove();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 6);\n    ɵngcc0.ɵɵtext(2, \"\\u00D7\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r1.options.titleClass);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r2.options.messageClass);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r2.message, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r3.options.messageClass);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelement(1, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.remove();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 6);\n    ɵngcc0.ɵɵtext(2, \"\\u00D7\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r1.options.titleClass);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r2.options.messageClass);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r2.message, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r3.options.messageClass);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelement(1, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nclass ToastContainerDirective {\n  constructor(el) {\n    this.el = el;\n  }\n\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n\n}\n\nToastContainerDirective.ɵfac = function ToastContainerDirective_Factory(t) {\n  return new (t || ToastContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nToastContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ToastContainerDirective,\n  selectors: [[\"\", \"toastContainer\", \"\"]],\n  exportAs: [\"toastContainer\"]\n});\n\nToastContainerDirective.ctorParameters = () => [{\n  type: ElementRef\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[toastContainer]',\n      exportAs: 'toastContainer'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\nclass ToastContainerModule {}\n\nToastContainerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToastContainerModule\n});\nToastContainerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ToastContainerModule_Factory(t) {\n    return new (t || ToastContainerModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastContainerModule, {\n    declarations: [ToastContainerDirective],\n    exports: [ToastContainerDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastContainerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ToastContainerDirective],\n      exports: [ToastContainerDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Everything a toast needs to launch\n */\n\n\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this._onTap = new Subject();\n    this._onAction = new Subject();\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  triggerTap() {\n    this._onTap.next();\n\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n\n\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\nclass ComponentPortal {\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    const host = this._attachedHost;\n\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nclass BasePortalHost {\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n}\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\n\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n\n    componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n\n      componentRef.destroy();\n    }); // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/** Container inside which all toasts will render. */\n\n\nclass OverlayContainer {\n  constructor(_document) {\n    this._document = _document;\n  }\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n\n\n  _createContainer() {\n    const container = this._document.createElement('div');\n\n    container.classList.add('overlay-container');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n\n\n  detach() {\n    return this._portalHost.detach();\n  }\n\n}\n/* tslint:disable:no-non-null-assertion */\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nclass Overlay {\n  constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._document = _document; // Namespace panes by overlay container\n\n    this._paneElements = new Map();\n  }\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n\n\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n\n\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n\n\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlay.ɵprov = ɵɵdefineInjectable({\n  factory: function Overlay_Factory() {\n    return new Overlay(ɵɵinject(OverlayContainer), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(DOCUMENT));\n  },\n  token: Overlay,\n  providedIn: \"root\"\n});\n\nOverlay.ctorParameters = () => [{\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\n\nclass ToastRef {\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Count of duplicates of this toast */\n\n    this.duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** triggered when toast is activated */\n\n    this._activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n\n    this._manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n\n    this._resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n\n    this._countDuplicate = new Subject();\n  }\n\n  manualClose() {\n    this._manualClose.next();\n\n    this._manualClose.complete();\n  }\n\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n\n\n  close() {\n    this._overlayRef.detach();\n\n    this._afterClosed.next();\n\n    this._manualClose.next();\n\n    this._afterClosed.complete();\n\n    this._manualClose.complete();\n\n    this._activate.complete();\n\n    this._resetTimeout.complete();\n\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n\n\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n\n\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n\n}\n/** Custom injector type specifically for instantiating components with a toast. */\n\n\nclass ToastInjector {\n  constructor(_toastPackage, _parentInjector) {\n    this._toastPackage = _toastPackage;\n    this._parentInjector = _parentInjector;\n  }\n\n  get(token, notFoundValue, flags) {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n\n    return this._parentInjector.get(token, notFoundValue, flags);\n  }\n\n}\n\nclass ToastrService {\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.currentlyActive = 0;\n    this.toasts = [];\n    this.index = 0;\n    this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n    }\n  }\n  /** show toast */\n\n\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n\n\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n\n\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n\n\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n\n\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n\n\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n\n\n  remove(toastId) {\n    const found = this._findToast(toastId);\n\n    if (!found) {\n      return false;\n    }\n\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n\n\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n\n\n  applyConfig(override = {}) {\n    return Object.assign(Object.assign({}, this.toastrConfig), override);\n  }\n  /**\n   * Find toast object by id\n   */\n\n\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n\n\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n\n\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    } // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n\n\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n\n}\n\nToastrService.ɵfac = function ToastrService_Factory(t) {\n  return new (t || ToastrService)(ɵngcc0.ɵɵinject(TOAST_CONFIG), ɵngcc0.ɵɵinject(Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nToastrService.ɵprov = ɵɵdefineInjectable({\n  factory: function ToastrService_Factory() {\n    return new ToastrService(ɵɵinject(TOAST_CONFIG), ɵɵinject(Overlay), ɵɵinject(INJECTOR), ɵɵinject(DomSanitizer), ɵɵinject(NgZone));\n  },\n  token: ToastrService,\n  providedIn: \"root\"\n});\n\nToastrService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TOAST_CONFIG]\n  }]\n}, {\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: DomSanitizer\n}, {\n  type: NgZone\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TOAST_CONFIG]\n      }]\n    }, {\n      type: Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nclass Toast {\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'removed'\n    });\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n\nToast.ɵfac = function Toast_Factory(t) {\n  return new (t || Toast)(ɵngcc0.ɵɵdirectiveInject(ToastrService), ɵngcc0.ɵɵdirectiveInject(ToastPackage), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nToast.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Toast,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 5,\n  hostBindings: function Toast_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n      ɵngcc0.ɵɵclassMap(ctx.toastClasses);\n      ɵngcc0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alertdialog\", \"aria-live\", \"polite\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alertdialog\", \"aria-live\", \"polite\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alertdialog\", \"aria-live\", \"polite\", 3, \"innerHTML\"], [\"role\", \"alertdialog\", \"aria-live\", \"polite\"], [1, \"toast-progress\"]],\n  template: function Toast_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n      ɵngcc0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n      ɵngcc0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('flyInOut', [state('inactive', style({\n      opacity: 0\n    })), state('active', style({\n      opacity: 1\n    })), state('removed', style({\n      opacity: 0\n    })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n  }\n});\n\nToast.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: NgZone\n}];\n\nToast.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  state: [{\n    type: HostBinding,\n    args: ['@flyInOut']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Toast, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      animations: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n      preserveWhitespaces: false\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    state: [{\n      type: HostBinding,\n      args: ['@flyInOut']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: Toast\n});\n\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToastrModule\n});\nToastrModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ToastrModule_Factory(t) {\n    return new (t || ToastrModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastrModule, {\n    declarations: function () {\n      return [Toast];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [Toast];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastrModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [Toast],\n      exports: [Toast],\n      entryComponents: [Toast]\n    }]\n  }], null, null);\n})();\n\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrComponentlessModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToastrComponentlessModule\n});\nToastrComponentlessModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ToastrComponentlessModule_Factory(t) {\n    return new (t || ToastrComponentlessModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastrComponentlessModule, {\n    imports: function () {\n      return [CommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastrComponentlessModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n\nclass ToastNoAnimation {\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = 'inactive';\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = 'active';\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n}\n\nToastNoAnimation.ɵfac = function ToastNoAnimation_Factory(t) {\n  return new (t || ToastNoAnimation)(ɵngcc0.ɵɵdirectiveInject(ToastrService), ɵngcc0.ɵɵdirectiveInject(ToastPackage), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef));\n};\n\nToastNoAnimation.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ToastNoAnimation,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 4,\n  hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.toastClasses);\n      ɵngcc0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", \"aria-live\", \"polite\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", \"aria-live\", \"polite\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", \"aria-live\", \"polite\", 3, \"innerHTML\"], [\"role\", \"alert\", \"aria-live\", \"polite\"], [1, \"toast-progress\"]],\n  template: function ToastNoAnimation_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n      ɵngcc0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n      ɵngcc0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  encapsulation: 2\n});\n\nToastNoAnimation.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: ApplicationRef\n}];\n\nToastNoAnimation.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastNoAnimation, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: ToastNoAnimation\n});\n\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastNoAnimationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToastNoAnimationModule\n});\nToastNoAnimationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ToastNoAnimationModule_Factory(t) {\n    return new (t || ToastNoAnimationModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastNoAnimationModule, {\n    declarations: function () {\n      return [ToastNoAnimation];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ToastNoAnimation];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ToastNoAnimationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ToastNoAnimation],\n      exports: [ToastNoAnimation],\n      entryComponents: [ToastNoAnimation]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };","map":{"version":3,"sources":["../../src/lib/toastr/toast.directive.ts","../../src/lib/toastr/toastr-config.ts","../../src/lib/portal/portal.ts","../../src/lib/portal/dom-portal-host.ts","../../src/lib/overlay/overlay-container.ts","../../src/lib/overlay/overlay-ref.ts","../../src/lib/overlay/overlay.ts","../../src/lib/toastr/toast-injector.ts","../../src/lib/toastr/toastr.service.ts","../../src/lib/toastr/toast.component.ts","../../src/lib/toastr/toastr.module.ts","../../src/lib/toastr/toast-noanimation.component.ts","../../src/lib/ngx-toastr.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n","import { InjectionToken } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\nexport type ProgressAnimationType = 'increasing' | 'decreasing';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean | 'timeOut' | 'extendedTimeOut';\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation: ProgressAnimationType;\n\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: ngx-toastr\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n  [key: string]: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n  /**\n   * display the number of duplicate messages\n   * default: false\n   */\n  countDuplicates: boolean;\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n  /**\n   * consider the title of a toast when checking if duplicate\n   * default: false\n   */\n  includeTitleDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<void>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap(): void {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<void> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any): void {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\n/** @deprecated use GlobalConfig */\nexport interface GlobalToastrConfig extends GlobalConfig {}\n/** @deprecated use IndividualConfig */\nexport interface IndividualToastrConfig extends IndividualConfig {}\n/** @deprecated use IndividualConfig */\nexport interface ToastrConfig extends IndividualConfig {}\n\nexport const DefaultNoComponentGlobalConfig: GlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  },\n\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n};\n\nexport interface ToastToken {\n  default: GlobalConfig;\n  config: Partial<GlobalConfig>;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  // tslint:disable-next-line:callable-types\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef!: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean): ComponentRef<any> {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\n\n/** Container inside which all toasts will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement!: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","/* tslint:disable:no-non-null-assertion */\nimport { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, ComponentFactoryResolver, Inject, Injectable } from '@angular/core';\n\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n@Injectable({ providedIn: 'root' })\nexport class Overlay {\n  // Namespace panes by overlay container\n  private _paneElements: Map<ToastContainerDirective, Record<string, HTMLElement>> = new Map();\n\n  constructor(\n    private _overlayContainer: OverlayContainer,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    @Inject(DOCUMENT) private _document: any,\n  ) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(\n    positionClass: string = '',\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)) {\n      this._paneElements.set(overlayContainer as ToastContainerDirective, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass]) {\n      this._paneElements.get(overlayContainer as ToastContainerDirective)![\n        positionClass\n      ] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(\n    positionClass: string,\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n","import { Injector, InjectFlags } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance!: T;\n\n  /** Count of duplicates of this toast */\n  private duplicatesCount = 0;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<void>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<void>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<void>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<void>();\n  /** notifies the toast that it should count a duplicate toast */\n  private _countDuplicate = new Subject<number>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate(): Observable<number> {\n    return this._countDuplicate.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout: boolean, countDuplicate: boolean) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector\n  ) {}\n\n  get<T>(token: any, notFoundValue?: T, flags?: InjectFlags): T | ToastPackage {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get<T>(token, notFoundValue, flags);\n  }\n}\n","import { ComponentRef, Inject, Injectable, Injector, NgZone, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  ToastToken,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the title of your toast. Stored to prevent duplicates */\n  title: string;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<void>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<void>;\n  /** triggered on toast click */\n  onTap: Observable<void>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer?: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone,\n  ) {\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses,\n      };\n    }\n  }\n  /** show toast */\n  show(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate: boolean, countDuplicates: boolean) {\n    const { includeTitleDuplicates } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(\n      title,\n      message,\n      this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0,\n      this.toastrConfig.countDuplicates,\n    );\n    if (\n      ((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n      this.toastrConfig.preventDuplicates &&\n      duplicate !== null\n    ) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition(\n        'inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition(\n        'active => removed',\n        animate('{{ easeTime }}ms {{ easing }}')\n      )\n    ])\n  ],\n  preserveWhitespaces: false\n})\nexport class Toast implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut')\n  state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in'\n    }\n  };\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle(): string | undefined {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: () => any) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Toast } from './toast.component';\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport const DefaultGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [Toast],\n  exports: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class ToastrComponentlessModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  NgModule,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n})\nexport class ToastNoAnimation implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  /** controls animation */\n  state = 'inactive';\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state === 'removed'\n    ) {\n      return;\n    }\n    this.timeout = setTimeout(\n      () => this.remove(),\n      this.options.extendedTimeOut,\n    );\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ToastNoAnimation],\n  exports: [ToastNoAnimation],\n  entryComponents: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}